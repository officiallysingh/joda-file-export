package com.zcompany.example.domain.model;

import java.math.BigDecimal;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.xebia.util.export.annotation.Export;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@BeanDefinition
@NoArgsConstructor
@AllArgsConstructor(staticName = "of")
public class ExchangeRate implements Bean {

    @PropertyDefinition
    @Export(columnName = "Ask Value")
    private BigDecimal askValue;

    @PropertyDefinition
    @Export(columnName = "Bid Value")
    private BigDecimal bidValue;

    public static ExchangeRate zero() {
        return of(RateValue.ZERO, RateValue.ZERO);
    }
    
    public static ExchangeRate one() {
        return of(RateValue.ONE, RateValue.ONE);
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code ExchangeRate}.
     * @return the meta-bean, not null
     */
    public static ExchangeRate.Meta meta() {
        return ExchangeRate.Meta.INSTANCE;
    }

    static {
        MetaBean.register(ExchangeRate.Meta.INSTANCE);
    }

    @Override
    public ExchangeRate.Meta metaBean() {
        return ExchangeRate.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the askValue.
     * @return the value of the property
     */
    public BigDecimal getAskValue() {
        return askValue;
    }

    /**
     * Sets the askValue.
     * @param askValue  the new value of the property
     */
    public void setAskValue(BigDecimal askValue) {
        this.askValue = askValue;
    }

    /**
     * Gets the the {@code askValue} property.
     * @return the property, not null
     */
    public final Property<BigDecimal> askValue() {
        return metaBean().askValue().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the bidValue.
     * @return the value of the property
     */
    public BigDecimal getBidValue() {
        return bidValue;
    }

    /**
     * Sets the bidValue.
     * @param bidValue  the new value of the property
     */
    public void setBidValue(BigDecimal bidValue) {
        this.bidValue = bidValue;
    }

    /**
     * Gets the the {@code bidValue} property.
     * @return the property, not null
     */
    public final Property<BigDecimal> bidValue() {
        return metaBean().bidValue().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public ExchangeRate clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ExchangeRate other = (ExchangeRate) obj;
            return JodaBeanUtils.equal(getAskValue(), other.getAskValue()) &&
                    JodaBeanUtils.equal(getBidValue(), other.getBidValue());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getAskValue());
        hash = hash * 31 + JodaBeanUtils.hashCode(getBidValue());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("ExchangeRate{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("askValue").append('=').append(JodaBeanUtils.toString(getAskValue())).append(',').append(' ');
        buf.append("bidValue").append('=').append(JodaBeanUtils.toString(getBidValue())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ExchangeRate}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code askValue} property.
         */
        private final MetaProperty<BigDecimal> askValue = DirectMetaProperty.ofReadWrite(
                this, "askValue", ExchangeRate.class, BigDecimal.class);
        /**
         * The meta-property for the {@code bidValue} property.
         */
        private final MetaProperty<BigDecimal> bidValue = DirectMetaProperty.ofReadWrite(
                this, "bidValue", ExchangeRate.class, BigDecimal.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "askValue",
                "bidValue");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -616641928:  // askValue
                    return askValue;
                case 640662132:  // bidValue
                    return bidValue;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends ExchangeRate> builder() {
            return new DirectBeanBuilder<>(new ExchangeRate());
        }

        @Override
        public Class<? extends ExchangeRate> beanType() {
            return ExchangeRate.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code askValue} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<BigDecimal> askValue() {
            return askValue;
        }

        /**
         * The meta-property for the {@code bidValue} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<BigDecimal> bidValue() {
            return bidValue;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -616641928:  // askValue
                    return ((ExchangeRate) bean).getAskValue();
                case 640662132:  // bidValue
                    return ((ExchangeRate) bean).getBidValue();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -616641928:  // askValue
                    ((ExchangeRate) bean).setAskValue((BigDecimal) newValue);
                    return;
                case 640662132:  // bidValue
                    ((ExchangeRate) bean).setBidValue((BigDecimal) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
