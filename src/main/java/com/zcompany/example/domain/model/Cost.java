package com.zcompany.example.domain.model;

import java.math.BigDecimal;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.xebia.util.export.annotation.Export;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@BeanDefinition
@NoArgsConstructor
@AllArgsConstructor(staticName = "of")
public class Cost implements Bean {

    @PropertyDefinition
    @Export(columnName = "Cost Sell")
    private BigDecimal sellValue;

    @PropertyDefinition
    @Export(columnName = "Cost Buy")
    private BigDecimal buyValue;

    public static Cost zero() {
        return new Cost(RateValue.ZERO, RateValue.ZERO);
    }

    public static Cost one() {
        return new Cost(RateValue.ONE, RateValue.ONE);
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code Cost}.
     * @return the meta-bean, not null
     */
    public static Cost.Meta meta() {
        return Cost.Meta.INSTANCE;
    }

    static {
        MetaBean.register(Cost.Meta.INSTANCE);
    }

    @Override
    public Cost.Meta metaBean() {
        return Cost.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the sellValue.
     * @return the value of the property
     */
    public BigDecimal getSellValue() {
        return sellValue;
    }

    /**
     * Sets the sellValue.
     * @param sellValue  the new value of the property
     */
    public void setSellValue(BigDecimal sellValue) {
        this.sellValue = sellValue;
    }

    /**
     * Gets the the {@code sellValue} property.
     * @return the property, not null
     */
    public final Property<BigDecimal> sellValue() {
        return metaBean().sellValue().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the buyValue.
     * @return the value of the property
     */
    public BigDecimal getBuyValue() {
        return buyValue;
    }

    /**
     * Sets the buyValue.
     * @param buyValue  the new value of the property
     */
    public void setBuyValue(BigDecimal buyValue) {
        this.buyValue = buyValue;
    }

    /**
     * Gets the the {@code buyValue} property.
     * @return the property, not null
     */
    public final Property<BigDecimal> buyValue() {
        return metaBean().buyValue().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public Cost clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            Cost other = (Cost) obj;
            return JodaBeanUtils.equal(getSellValue(), other.getSellValue()) &&
                    JodaBeanUtils.equal(getBuyValue(), other.getBuyValue());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getSellValue());
        hash = hash * 31 + JodaBeanUtils.hashCode(getBuyValue());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("Cost{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("sellValue").append('=').append(JodaBeanUtils.toString(getSellValue())).append(',').append(' ');
        buf.append("buyValue").append('=').append(JodaBeanUtils.toString(getBuyValue())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code Cost}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code sellValue} property.
         */
        private final MetaProperty<BigDecimal> sellValue = DirectMetaProperty.ofReadWrite(
                this, "sellValue", Cost.class, BigDecimal.class);
        /**
         * The meta-property for the {@code buyValue} property.
         */
        private final MetaProperty<BigDecimal> buyValue = DirectMetaProperty.ofReadWrite(
                this, "buyValue", Cost.class, BigDecimal.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "sellValue",
                "buyValue");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1528130241:  // sellValue
                    return sellValue;
                case -992983413:  // buyValue
                    return buyValue;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends Cost> builder() {
            return new DirectBeanBuilder<>(new Cost());
        }

        @Override
        public Class<? extends Cost> beanType() {
            return Cost.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code sellValue} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<BigDecimal> sellValue() {
            return sellValue;
        }

        /**
         * The meta-property for the {@code buyValue} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<BigDecimal> buyValue() {
            return buyValue;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1528130241:  // sellValue
                    return ((Cost) bean).getSellValue();
                case -992983413:  // buyValue
                    return ((Cost) bean).getBuyValue();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1528130241:  // sellValue
                    ((Cost) bean).setSellValue((BigDecimal) newValue);
                    return;
                case -992983413:  // buyValue
                    ((Cost) bean).setBuyValue((BigDecimal) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
