package com.zcompany.example.domain.model;

import java.time.DayOfWeek;
import java.time.Duration;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.xebia.util.export.annotation.Export;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@NoArgsConstructor(access = AccessLevel.PACKAGE)
@AllArgsConstructor(staticName = "of")
@BeanDefinition
public class Timesheet implements Bean {

    @Export(columnName = "timesheet.column.header.project")
    @PropertyDefinition
    private String project;

    @Export(columnName = "timesheet.column.header.billable")
    @PropertyDefinition
    private Boolean billable;

//    @Download(columnName = "timesheet.column.header.duration")
//    @PropertyDefinition
//    private Map<DayOfWeek, Duration> timeEntries;

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code Timesheet}.
     * @return the meta-bean, not null
     */
    public static Timesheet.Meta meta() {
        return Timesheet.Meta.INSTANCE;
    }

    static {
        MetaBean.register(Timesheet.Meta.INSTANCE);
    }

    @Override
    public Timesheet.Meta metaBean() {
        return Timesheet.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the project.
     * @return the value of the property
     */
    public String getProject() {
        return project;
    }

    /**
     * Sets the project.
     * @param project  the new value of the property
     */
    public void setProject(String project) {
        this.project = project;
    }

    /**
     * Gets the the {@code project} property.
     * @return the property, not null
     */
    public final Property<String> project() {
        return metaBean().project().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the billable.
     * @return the value of the property
     */
    public Boolean getBillable() {
        return billable;
    }

    /**
     * Sets the billable.
     * @param billable  the new value of the property
     */
    public void setBillable(Boolean billable) {
        this.billable = billable;
    }

    /**
     * Gets the the {@code billable} property.
     * @return the property, not null
     */
    public final Property<Boolean> billable() {
        return metaBean().billable().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public Timesheet clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            Timesheet other = (Timesheet) obj;
            return JodaBeanUtils.equal(getProject(), other.getProject()) &&
                    JodaBeanUtils.equal(getBillable(), other.getBillable());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getProject());
        hash = hash * 31 + JodaBeanUtils.hashCode(getBillable());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("Timesheet{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("project").append('=').append(JodaBeanUtils.toString(getProject())).append(',').append(' ');
        buf.append("billable").append('=').append(JodaBeanUtils.toString(getBillable())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code Timesheet}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code project} property.
         */
        private final MetaProperty<String> project = DirectMetaProperty.ofReadWrite(
                this, "project", Timesheet.class, String.class);
        /**
         * The meta-property for the {@code billable} property.
         */
        private final MetaProperty<Boolean> billable = DirectMetaProperty.ofReadWrite(
                this, "billable", Timesheet.class, Boolean.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "project",
                "billable");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -309310695:  // project
                    return project;
                case 890002913:  // billable
                    return billable;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends Timesheet> builder() {
            return new DirectBeanBuilder<>(new Timesheet());
        }

        @Override
        public Class<? extends Timesheet> beanType() {
            return Timesheet.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code project} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> project() {
            return project;
        }

        /**
         * The meta-property for the {@code billable} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> billable() {
            return billable;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -309310695:  // project
                    return ((Timesheet) bean).getProject();
                case 890002913:  // billable
                    return ((Timesheet) bean).getBillable();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -309310695:  // project
                    ((Timesheet) bean).setProject((String) newValue);
                    return;
                case 890002913:  // billable
                    ((Timesheet) bean).setBillable((Boolean) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
