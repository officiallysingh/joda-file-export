package com.zcompany.example.domain.model;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import io.swagger.annotations.ApiModel;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@BeanDefinition
@NoArgsConstructor
@AllArgsConstructor(staticName = "of")
@ApiModel(value = "exchange", description = "Source and Target currency along with Ask and Bid values")
public class Exchange implements Bean {

    @PropertyDefinition
    private CurrencyExchange currency;

    @PropertyDefinition
    private ExchangeRate rate;

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code Exchange}.
     * @return the meta-bean, not null
     */
    public static Exchange.Meta meta() {
        return Exchange.Meta.INSTANCE;
    }

    static {
        MetaBean.register(Exchange.Meta.INSTANCE);
    }

    @Override
    public Exchange.Meta metaBean() {
        return Exchange.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the currency.
     * @return the value of the property
     */
    public CurrencyExchange getCurrency() {
        return currency;
    }

    /**
     * Sets the currency.
     * @param currency  the new value of the property
     */
    public void setCurrency(CurrencyExchange currency) {
        this.currency = currency;
    }

    /**
     * Gets the the {@code currency} property.
     * @return the property, not null
     */
    public final Property<CurrencyExchange> currency() {
        return metaBean().currency().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the rate.
     * @return the value of the property
     */
    public ExchangeRate getRate() {
        return rate;
    }

    /**
     * Sets the rate.
     * @param rate  the new value of the property
     */
    public void setRate(ExchangeRate rate) {
        this.rate = rate;
    }

    /**
     * Gets the the {@code rate} property.
     * @return the property, not null
     */
    public final Property<ExchangeRate> rate() {
        return metaBean().rate().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public Exchange clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            Exchange other = (Exchange) obj;
            return JodaBeanUtils.equal(getCurrency(), other.getCurrency()) &&
                    JodaBeanUtils.equal(getRate(), other.getRate());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getCurrency());
        hash = hash * 31 + JodaBeanUtils.hashCode(getRate());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("Exchange{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("currency").append('=').append(JodaBeanUtils.toString(getCurrency())).append(',').append(' ');
        buf.append("rate").append('=').append(JodaBeanUtils.toString(getRate())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code Exchange}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code currency} property.
         */
        private final MetaProperty<CurrencyExchange> currency = DirectMetaProperty.ofReadWrite(
                this, "currency", Exchange.class, CurrencyExchange.class);
        /**
         * The meta-property for the {@code rate} property.
         */
        private final MetaProperty<ExchangeRate> rate = DirectMetaProperty.ofReadWrite(
                this, "rate", Exchange.class, ExchangeRate.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "currency",
                "rate");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 575402001:  // currency
                    return currency;
                case 3493088:  // rate
                    return rate;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends Exchange> builder() {
            return new DirectBeanBuilder<>(new Exchange());
        }

        @Override
        public Class<? extends Exchange> beanType() {
            return Exchange.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code currency} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<CurrencyExchange> currency() {
            return currency;
        }

        /**
         * The meta-property for the {@code rate} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<ExchangeRate> rate() {
            return rate;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 575402001:  // currency
                    return ((Exchange) bean).getCurrency();
                case 3493088:  // rate
                    return ((Exchange) bean).getRate();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 575402001:  // currency
                    ((Exchange) bean).setCurrency((CurrencyExchange) newValue);
                    return;
                case 3493088:  // rate
                    ((Exchange) bean).setRate((ExchangeRate) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
