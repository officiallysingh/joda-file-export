package com.zcompany.example.domain.model;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.xebia.util.export.annotation.Export;
import com.xebia.util.export.annotation.ExportOverride;
import com.xebia.util.export.annotation.ExportOverrides;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@BeanDefinition
@NoArgsConstructor
@AllArgsConstructor(staticName = "of")
public class ValueDateWise implements Bean {

    @PropertyDefinition
    private Cost margin;

    // @formatter:off
    @ExportOverrides({
            @ExportOverride(fieldName = "sellValue", export = @Export(columnName = "Settlement Rate Sell")),
            @ExportOverride(fieldName = "buyValue", export = @Export(columnName = "Settlement Rate Buy")) 
        }
    )
    // @formatter:on
    @PropertyDefinition
    private Cost settlement;

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code ValueDateWise}.
     * @return the meta-bean, not null
     */
    public static ValueDateWise.Meta meta() {
        return ValueDateWise.Meta.INSTANCE;
    }

    static {
        MetaBean.register(ValueDateWise.Meta.INSTANCE);
    }

    @Override
    public ValueDateWise.Meta metaBean() {
        return ValueDateWise.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the margin.
     * @return the value of the property
     */
    public Cost getMargin() {
        return margin;
    }

    /**
     * Sets the margin.
     * @param margin  the new value of the property
     */
    public void setMargin(Cost margin) {
        this.margin = margin;
    }

    /**
     * Gets the the {@code margin} property.
     * @return the property, not null
     */
    public final Property<Cost> margin() {
        return metaBean().margin().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the settlement.
     * @return the value of the property
     */
    public Cost getSettlement() {
        return settlement;
    }

    /**
     * Sets the settlement.
     * @param settlement  the new value of the property
     */
    public void setSettlement(Cost settlement) {
        this.settlement = settlement;
    }

    /**
     * Gets the the {@code settlement} property.
     * @return the property, not null
     */
    public final Property<Cost> settlement() {
        return metaBean().settlement().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public ValueDateWise clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ValueDateWise other = (ValueDateWise) obj;
            return JodaBeanUtils.equal(getMargin(), other.getMargin()) &&
                    JodaBeanUtils.equal(getSettlement(), other.getSettlement());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getMargin());
        hash = hash * 31 + JodaBeanUtils.hashCode(getSettlement());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("ValueDateWise{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("margin").append('=').append(JodaBeanUtils.toString(getMargin())).append(',').append(' ');
        buf.append("settlement").append('=').append(JodaBeanUtils.toString(getSettlement())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ValueDateWise}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code margin} property.
         */
        private final MetaProperty<Cost> margin = DirectMetaProperty.ofReadWrite(
                this, "margin", ValueDateWise.class, Cost.class);
        /**
         * The meta-property for the {@code settlement} property.
         */
        private final MetaProperty<Cost> settlement = DirectMetaProperty.ofReadWrite(
                this, "settlement", ValueDateWise.class, Cost.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "margin",
                "settlement");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1081309778:  // margin
                    return margin;
                case 73828649:  // settlement
                    return settlement;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends ValueDateWise> builder() {
            return new DirectBeanBuilder<>(new ValueDateWise());
        }

        @Override
        public Class<? extends ValueDateWise> beanType() {
            return ValueDateWise.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code margin} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Cost> margin() {
            return margin;
        }

        /**
         * The meta-property for the {@code settlement} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Cost> settlement() {
            return settlement;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1081309778:  // margin
                    return ((ValueDateWise) bean).getMargin();
                case 73828649:  // settlement
                    return ((ValueDateWise) bean).getSettlement();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1081309778:  // margin
                    ((ValueDateWise) bean).setMargin((Cost) newValue);
                    return;
                case 73828649:  // settlement
                    ((ValueDateWise) bean).setSettlement((Cost) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
